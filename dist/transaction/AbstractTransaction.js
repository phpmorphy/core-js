/**
 * @license
 * Copyright (c) 2020 UMI
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

'use strict'

const array = require('../util/array.js')
const sha256 = require('../util/sha256.js')
const SecretKey = require('../key/ed25519/SecretKey.js')
const validator = require('../util/validator.js')
const integer = require('../util/integer.js')
const Address = require('../address/Address.js')
const base64 = require('../util/base64.js')

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
 * @class
 * @lends Transaction
 * @private
 */
class AbstractTransaction {
  /**
   * @param {number[]|Uint8Array|Buffer} [bytes] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ, 150 –±–∞–π—Ç.
   * @throws {Error}
   * @private
   */
  constructor (bytes) {
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ.
     * @type {number[]}
     * @private
     */
    this._bytes = array.arrayNew(150)
    if (bytes !== undefined) {
      if (bytes.length !== 150) {
        throw new Error('incorrect length')
      }
      array.arraySet(this._bytes, bytes)
    }
  }

  /**
   * Genesis-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è.
   * –ú–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Genesis-–±–ª–æ–∫.
   * –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å genesis, –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è - umi.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('genesis')
   * let recipient = Address.fromKey(secKey).setPrefix('umi')
   * let tx = new Transaction().
   *   setVersion(Transaction.Genesis).
   *   setSender(sender).
   *   setRecipient(recipient).
   *   setValue(42).
   *   sign(secKey)
   */
  static get Genesis () { return 0 }
  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è. –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ –¥—Ä—É–≥–æ–π.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let recipient = Address.fromKey(secKey).setPrefix('aaa')
   * let tx = new Transaction().
   *   setVersion(Transaction.Basic).
   *   setSender(sender).
   *   setRecipient(recipient).
   *   setValue(42).
   *   sign(secKey)
   */
  static get Basic () { return 1 }
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let tx = new Transaction().
   *   setVersion(Transaction.CreateStructure).
   *   setSender(sender).
   *   setPrefix('aaa').
   *   setName('üôÇ').
   *   setProfitPercent(100).
   *   setFeePercent(0).
   *   sign(secKey)
   */
  static get CreateStructure () { return 2 }
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let tx = new Transaction().
   *   setVersion(Transaction.UpdateStructure).
   *   setSender(sender).
   *   setPrefix('aaa').
   *   setName('üôÇ').
   *   setProfitPercent(500).
   *   setFeePercent(2000).
   *   sign(secKey)
   */
  static get UpdateStructure () { return 3 }
  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let newPrf = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
   * let tx = new Transaction().
   *   setVersion(Transaction.UpdateProfitAddress).
   *   setSender(sender).
   *   setRecipient(newPrf).
   *   sign(secKey)
   */
  static get UpdateProfitAddress () { return 4 }
  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let newFee = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
   * let tx = new Transaction().
   *   setVersion(Transaction.UpdateFeeAddress).
   *   setSender(sender).
   *   setRecipient(newFee).
   *   sign(secKey)
   */
  static get UpdateFeeAddress () { return 5 }
  /**
   * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let transit = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
   * let tx = new Transaction().
   *   setVersion(Transaction.CreateTransitAddress).
   *   setSender(sender).
   *   setRecipient(transit).
   *   sign(secKey)
   */
  static get CreateTransitAddress () { return 6 }
  /**
   * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let transit = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
   * let tx = new Transaction().
   *   setVersion(Transaction.DeleteTransitAddress).
   *   setSender(sender).
   *   setRecipient(transit).
   *   sign(secKey)
   */
  static get DeleteTransitAddress () { return 7 }
  /**
   * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ, 150 –±–∞–π—Ç.
   * @type {number[]}
   * @readonly
   */
  get bytes () {
    return this._bytes.slice(0)
  }

  /**
   * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64.
   * @type {string}
   * @readonly
   */
  get base64 () {
    return base64.base64Encode(this._bytes)
  }

  /**
   * –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, sha256 –æ—Ç –≤—Å–µ—Ö 150 –±–∞–π—Ç.
   * @type {number[]}
   * @readonly
   */
  get hash () {
    return sha256.sha256(this._bytes)
  }

  /**
   * –í–µ—Ä—Å–∏—è (—Ç–∏–ø) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
   * –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
   * –ò–∑–º–µ–Ω—è—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω –±—ã–ª –∑–∞–¥–∞–Ω, –Ω–µ–ª—å–∑—è.
   * @type {number}
   * @see Transaction.Genesis
   * @see Transaction.Basic
   * @see Transaction.CreateStructure
   * @see Transaction.UpdateStructure
   * @see Transaction.UpdateProfitAddress
   * @see Transaction.UpdateFeeAddress
   * @see Transaction.CreateTransitAddress
   * @see Transaction.DeleteTransitAddress
   */
  get version () {
    return this._bytes[0]
  }

  set version (version) {
    validator.validateInt(version, 0, 7)
    this._bytes[0] = version
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç this.
   * @param {number} version –í–µ—Ä—Å–∏—è –∞–¥—Ä–µ—Å–∞.
   * @returns {Transaction}
   * @throws {Error}
   * @see Transaction.Genesis
   * @see Transaction.Basic
   * @see Transaction.CreateStructure
   * @see Transaction.UpdateStructure
   * @see Transaction.UpdateProfitAddress
   * @see Transaction.UpdateFeeAddress
   * @see Transaction.CreateTransitAddress
   * @see Transaction.DeleteTransitAddress
   */
  setVersion (version) {
    this.version = version
    return this
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
   * @type {Address}
   */
  get sender () {
    return new Address.Address(this._bytes.slice(1, 35))
  }

  set sender (address) {
    if (!(address instanceof Address.Address)) {
      throw new Error('address type must be Address')
    }
    array.arraySet(this._bytes, address.bytes, 1)
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç this.
   * @param {Address} address –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
   * @returns {Transaction}
   * @throws {Error}
   */
  setSender (address) {
    this.sender = address
    return this
  }

  /**
   * –ü–æ–ª—É—á–∞—Ç–µ–ª—å.
   * –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π CreateStructure –∏ UpdateStructure.
   * @type {Address}
   */
  get recipient () {
    return new Address.Address(this._bytes.slice(35, 69))
  }

  set recipient (address) {
    if (!(address instanceof Address.Address)) {
      throw new Error('recipient type must be Address')
    }
    array.arraySet(this._bytes, address.bytes, 35)
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç this.
   * –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫—Ä–æ–º–µ CreateStructure –∏ UpdateStructure.
   * @param {Address} address –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
   * @returns {Transaction}
   * @throws {Error}
   */
  setRecipient (address) {
    this.recipient = address
    return this
  }

  /**
   * –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ UMI-—Ü–µ–Ω—Ç–∞—Ö, —Ü–µ–ª–æ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 18446744073709551615.
   * –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π JavaScript –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 9007199254740991.
   * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Genesis –∏ Basic —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
   * @type {number}
   */
  get value () {
    return integer.bytesToUint64(this._bytes.slice(69, 77))
  }

  set value (value) {
    validator.validateInt(value, 1, 18446744073709551615)
    array.arraySet(this._bytes, integer.uint64ToBytes(value), 69)
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–º–º—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç this.
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 18446744073709551615.
   * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Genesis –∏ Basic —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
   * @param {number} value
   * @returns {Transaction}
   * @throws {Error}
   */
  setValue (value) {
    this.value = value
    return this
  }

  /**
   * Nonce, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 0 –¥–æ 18446744073709551615.
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sign().
   * @type {number}
   */
  get nonce () {
    return integer.bytesToUint64(this._bytes.slice(77, 85))
  }

  set nonce (nonce) {
    validator.validateInt(nonce, 0, 18446744073709551615)
    array.arraySet(this._bytes, integer.uint64ToBytes(nonce), 77)
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç nonce –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç this.
   * @param {number} nonce Nonce, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 0 –¥–æ 18446744073709551615.
   * @returns {Transaction}
   * @throws {Error}
   */
  setNonce (nonce) {
    this.nonce = nonce
    return this
  }

  /**
   * –¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –¥–ª–∏–Ω–∞ 64 –±–∞–π—Ç–∞.
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sign().
   * @type {number[]|Uint8Array|Buffer}
   */
  get signature () {
    return this._bytes.slice(85, 149)
  }

  set signature (signature) {
    if (signature.length !== 64) {
      throw new Error('invalid length')
    }
    array.arraySet(this._bytes, signature, 85)
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç this.
   * @param {number[]|Uint8Array|Buffer} signature –ü–æ–¥–ø–∏—Å—å, –¥–ª–∏–Ω–∞ 64 –±–∞–π—Ç–∞.
   * @returns {Transaction}
   * @throws {Error}
   */
  setSignature (signature) {
    this.signature = signature
    return this
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º.
   * @param {SecretKey} secretKey
   * @returns {Transaction}
   * @throws {Error}
   */
  sign (secretKey) {
    if (!(secretKey instanceof SecretKey.SecretKey)) {
      throw new Error('secretKey type must be SecretKey')
    }
    return this.setSignature(secretKey.sign(this._bytes.slice(0, 85)))
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.
   * @returns {boolean}
   * @throws {Error}
   */
  verify () {
    return this.sender.publicKey.verifySignature(this.signature, this._bytes.slice(0, 85))
  }
}

exports.AbstractTransaction = AbstractTransaction
