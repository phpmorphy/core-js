/**
 * @license
 * Copyright (c) 2020 UMI
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

'use strict'

const Validator = require('../util/Validator.js')
const Sha256 = require('../util/Sha256.js')
const SecretKey = require('../key/ed25519/SecretKey.js')
const Address = require('../address/Address.js')

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
 * @class
 * @lends Transaction
 * @private
 */
class TransactionBase {
  /**
   * @param {Uint8Array} [bytes] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ, 150 –±–∞–π—Ç.
   * @throws {Error}
   * @private
   */
  constructor (bytes) {
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ.
     * @type {Uint8Array}
     * @private
     */
    this._bytes = new Uint8Array(TransactionBase.LENGTH)
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ.
     * @type {DataView}
     * @private
     */
    this._view = new DataView(this._bytes.buffer)
    /**
     * –ó–∞–ø–æ–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞.
     * @type {Object}
     * @private
     */
    this._fieldsMap = {}
    if (bytes !== undefined) {
      Validator.validateUint8Array(bytes, TransactionBase.LENGTH)
      this._bytes.set(bytes)
      this._setFields([
        'version', 'sender', 'recipient', 'value', 'prefix',
        'name', 'profitPercent', 'feePercent', 'nonce', 'signature'
      ])
    }
  }

  /**
   * –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–π—Ç–∞—Ö.
   * @type {number}
   * @constant
   */
  static get LENGTH () { return 150 }
  /**
   * Genesis-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è.
   * –ú–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Genesis-–±–ª–æ–∫.
   * –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å genesis, –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞–µ—Ç–µ–ª—è - umi.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('genesis')
   * let recipient = Address.fromKey(secKey).setPrefix('umi')
   * let tx = new Transaction().
   *   setVersion(Transaction.Genesis).
   *   setSender(sender).
   *   setRecipient(recipient).
   *   setValue(42).
   *   sign(secKey)
   */
  static get Genesis () { return 0 }
  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è. –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ –¥—Ä—É–≥–æ–π.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let recipient = Address.fromKey(secKey).setPrefix('aaa')
   * let tx = new Transaction().
   *   setVersion(Transaction.Basic).
   *   setSender(sender).
   *   setRecipient(recipient).
   *   setValue(42).
   *   sign(secKey)
   */
  static get Basic () { return 1 }
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let tx = new Transaction().
   *   setVersion(Transaction.CreateStructure).
   *   setSender(sender).
   *   setPrefix('aaa').
   *   setName('üôÇ').
   *   setProfitPercent(100).
   *   setFeePercent(0).
   *   sign(secKey)
   */
  static get CreateStructure () { return 2 }
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let tx = new Transaction().
   *   setVersion(Transaction.UpdateStructure).
   *   setSender(sender).
   *   setPrefix('aaa').
   *   setName('üôÇ').
   *   setProfitPercent(500).
   *   setFeePercent(2000).
   *   sign(secKey)
   */
  static get UpdateStructure () { return 3 }
  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let newPrf = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
   * let tx = new Transaction().
   *   setVersion(Transaction.UpdateProfitAddress).
   *   setSender(sender).
   *   setRecipient(newPrf).
   *   sign(secKey)
   */
  static get UpdateProfitAddress () { return 4 }
  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–æ–∏—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let newFee = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
   * let tx = new Transaction().
   *   setVersion(Transaction.UpdateFeeAddress).
   *   setSender(sender).
   *   setRecipient(newFee).
   *   sign(secKey)
   */
  static get UpdateFeeAddress () { return 5 }
  /**
   * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let transit = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
   * let tx = new Transaction().
   *   setVersion(Transaction.CreateTransitAddress).
   *   setSender(sender).
   *   setRecipient(transit).
   *   sign(secKey)
   */
  static get CreateTransitAddress () { return 6 }
  /**
   * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.
   * @type {number}
   * @constant
   * @example
   * let secKey = SecretKey.fromSeed(new Uint8Array(32))
   * let sender = Address.fromKey(secKey).setPrefix('umi')
   * let transit = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
   * let tx = new Transaction().
   *   setVersion(Transaction.DeleteTransitAddress).
   *   setSender(sender).
   *   setRecipient(transit).
   *   sign(secKey)
   */
  static get DeleteTransitAddress () { return 7 }
  /**
   * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ, 150 –±–∞–π—Ç.
   * @type {Uint8Array}
   * @readonly
   */
  get bytes () {
    const b = new Uint8Array(this._bytes.byteLength)
    b.set(this._bytes)
    return b
  }

  /**
   * –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, sha256 –æ—Ç –≤—Å–µ—Ö 150 –±–∞–π—Ç.
   * @type {Uint8Array}
   * @readonly
   */
  get hash () {
    return Sha256.sha256(this._bytes)
  }

  /**
   * –í–µ—Ä—Å–∏—è (—Ç–∏–ø) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
   * –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
   * –ò–∑–º–µ–Ω—è—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω –±—ã–ª –∑–∞–¥–∞–Ω, –Ω–µ–ª—å–∑—è.
   * @type {number}
   * @throws {Error}
   * @see Transaction.Genesis
   * @see Transaction.Basic
   * @see Transaction.CreateStructure
   * @see Transaction.UpdateStructure
   * @see Transaction.UpdateProfitAddress
   * @see Transaction.UpdateFeeAddress
   * @see Transaction.CreateTransitAddress
   * @see Transaction.DeleteTransitAddress
   */
  get version () {
    this._checkFields(['version'])
    return this._bytes[0]
  }

  set version (version) {
    if (Object.prototype.hasOwnProperty.call(this._fieldsMap, 'version')) {
      throw new Error('could not update version')
    }
    Validator.validateInt(version, TransactionBase.Genesis, TransactionBase.DeleteTransitAddress)
    this._bytes[0] = version
    this._setFields(['version'])
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
   * @param {number} version –í–µ—Ä—Å–∏—è –∞–¥—Ä–µ—Å–∞.
   * @returns {this}
   * @throws {Error}
   * @see Transaction.Genesis
   * @see Transaction.Basic
   * @see Transaction.CreateStructure
   * @see Transaction.UpdateStructure
   * @see Transaction.UpdateProfitAddress
   * @see Transaction.UpdateFeeAddress
   * @see Transaction.CreateTransitAddress
   * @see Transaction.DeleteTransitAddress
   */
  setVersion (version) {
    this.version = version
    return this
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
   * @type {Address}
   * @throws {Error}
   */
  get sender () {
    this._checkFields(['sender'])
    return new Address.Address(this._bytes.subarray(1, 35))
  }

  set sender (address) {
    this._checkFields(['version'])
    if (!(address instanceof Address.Address)) {
      throw new Error('address type must be Address')
    }
    if (this.version === TransactionBase.Genesis &&
      address.version !== Address.Address.Genesis) {
      throw new Error('address version must be genesis')
    }
    if (this.version !== TransactionBase.Genesis &&
      address.version === Address.Address.Genesis) {
      throw new Error('address version must not be genesis')
    }
    this._bytes.set(address.bytes, 1)
    this._setFields(['sender'])
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
   * @param {Address} address –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
   * @returns {this}
   * @throws {Error}
   */
  setSender (address) {
    this.sender = address
    return this
  }

  /**
   * –ü–æ–ª—É—á–∞—Ç–µ–ª—å.
   * –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π CreateStructure –∏ UpdateStructure.
   * @type {Address}
   * @throws {Error}
   */
  get recipient () {
    this._checkFields(['version'])
    this._checkVersionIsNotStruct()
    this._checkFields(['recipient'])
    return new Address.Address(this._bytes.subarray(35, 69))
  }

  set recipient (address) {
    this._checkFields(['version'])
    this._checkVersionIsNotStruct()
    if (!(address instanceof Address.Address)) {
      throw new Error('recipient type must be Address')
    }
    if (address.version === Address.Address.Genesis) {
      throw new Error('recipient version must not be genesis')
    }
    if (this.version === TransactionBase.Genesis &&
      address.version !== Address.Address.Umi) {
      throw new Error('recipient version must be umi')
    }
    if (this.version !== TransactionBase.Genesis &&
      this.version !== TransactionBase.Basic &&
      address.version === Address.Address.Umi) {
      throw new Error('recipient version must not be umi')
    }
    this._bytes.set(address.bytes, 35)
    this._setFields(['recipient'])
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
   * –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫—Ä–æ–º–µ CreateStructure –∏ UpdateStructure.
   * @param {Address} address –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
   * @returns {this}
   * @throws {Error}
   */
  setRecipient (address) {
    this.recipient = address
    return this
  }

  /**
   * –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ UMI-—Ü–µ–Ω—Ç–∞—Ö, —Ü–µ–ª–æ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 18446744073709551615.
   * –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π JavaScript –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 9007199254740991.
   * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Genesis –∏ Basic —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
   * @type {number}
   * @throws {Error}
   */
  get value () {
    this._checkFields(['version'])
    this._checkVersionIsBasic()
    this._checkFields(['value'])
    if (this._view.getUint16(69) > 0x001f) {
      throw new Error('value is not safe integer')
    }
    return this._view.getUint32(69) * 4294967296 +
      this._view.getUint32(69 + 4)
  }

  set value (value) {
    this._checkFields(['version'])
    this._checkVersionIsBasic()
    Validator.validateInt(value, 1, 9007199254740991)
    this._view.setInt32(69 + 4, value | 0)
    this._view.setInt32(69, (value - this._view.getUint32(69 + 4)) / 4294967296)
    this._setFields(['value'])
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–º–º—É –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 9007199254740991.
   * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Genesis –∏ Basic —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
   * @param {number} value
   * @returns {this}
   * @throws {Error}
   */
  setValue (value) {
    this.value = value
    return this
  }

  /**
   * Nonce, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 0 –¥–æ 18446744073709551615.
   * –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π JavaScript –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 9007199254740991.
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sign().
   * @type {number}
   * @throws {Error}
   */
  get nonce () {
    this._checkFields(['nonce'])
    if (this._view.getUint16(77) > 0x001f) {
      throw new Error('nonce is not safe integer')
    }
    return this._view.getUint32(77) * 4294967296 +
      this._view.getUint32(77 + 4)
  }

  set nonce (nonce) {
    Validator.validateInt(nonce, 0, 9007199254740991)
    this._view.setInt32(77 + 4, nonce | 0)
    this._view.setInt32(77, (nonce - this._view.getUint32(77 + 4)) / 4294967296)
    this._setFields(['nonce'])
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç nonce –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
   * @param {number} nonce Nonce, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ–≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 0 –¥–æ 9007199254740991.
   * @returns {this}
   * @throws {Error}
   */
  setNonce (nonce) {
    this.nonce = nonce
    return this
  }

  /**
   * –¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∫—Ü–∏–∏, –¥–ª–∏–Ω–∞ 64 –±–∞–π—Ç–∞.
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sign().
   * @type {Uint8Array}
   * @throws {Error}
   */
  get signature () {
    this._checkFields(['signature'])
    const len = this.sender.publicKey.signatureLength
    const sig = new Uint8Array(len)
    sig.set(this._bytes.subarray(85, 85 + len))
    return sig
  }

  set signature (signature) {
    this._checkFields(['version', 'sender'])
    Validator.validateUint8Array(signature, this.sender.publicKey.signatureLength)
    this._bytes.set(signature, 85)
    this._setFields(['signature'])
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
   * @param {Uint8Array} signature –ü–æ–¥–ø–∏—Å—å, –¥–ª–∏–Ω–∞ 64 –±–∞–π—Ç–∞.
   * @returns {this}
   * @throws {Error}
   */
  setSignature (signature) {
    this.signature = signature
    return this
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–µ–º.
   * @param {SecretKey} secretKey
   * @returns {this}
   * @throws {Error}
   */
  sign (secretKey) {
    this._checkFields(['version', 'sender'])
    if (!(secretKey instanceof SecretKey.SecretKey)) {
      throw new Error('secretKey type must be SecretKey')
    }
    const msg = this._bytes.subarray(0, 85)
    this.signature = secretKey.sign(msg)
    return this
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.
   * @returns {boolean}
   * @throws {Error}
   */
  verify () {
    this._checkFields(['version', 'sender', 'signature'])
    const msg = this._bytes.subarray(0, 85)
    return this.sender.publicKey.verifySignature(this.signature, msg)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞.
   * @param {string[]} fields
   * @throws {Error}
   * @private
   */
  _checkFields (fields) {
    for (const field of fields) {
      if (!Object.prototype.hasOwnProperty.call(this._fieldsMap, field)) {
        throw new Error(`${field} must be set`)
      }
    }
  }

  /**
   * @throws {Error}
   * @private
   */
  _checkVersionIsBasic () {
    const versions = [TransactionBase.Genesis, TransactionBase.Basic]
    if (versions.indexOf(this.version) === -1) {
      throw new Error('unavailable for this transaction type')
    }
  }

  /**
   * @throws {Error}
   * @private
   */
  _checkVersionIsNotStruct () {
    const versions = [TransactionBase.CreateStructure, TransactionBase.UpdateStructure]
    if (versions.indexOf(this.version) !== -1) {
      throw new Error('unavailable for this transaction type')
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ.
   * @param {string[]} fields
   * @private
   */
  _setFields (fields) {
    for (const field of fields) {
      this._fieldsMap[field] = true
    }
  }
}

exports.TransactionBase = TransactionBase
