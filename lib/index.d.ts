/// <reference types="node" />
/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏.
 * @class
 */
export declare class Address {
    /**
     * –í–µ—Ä—Å–∏—è Genesis-–∞–¥—Ä—Å–∞.
     * @type {number}
     * @constant
     */
    static get Genesis(): number;
    /**
     * –í–µ—Ä—Å–∏—è Umi-–∞–¥—Ä–µ—Å–∞.
     * @type {number}
     * @constant
     */
    static get Umi(): number;
    /**
     * @param {number[]|Uint8Array} [bytes] –ê–¥—Ä–µ—Å –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ, –¥–ª–∏–Ω–∞ 34 –±–∞–π—Ç–∞.
     * @throws {Error}
     */
    constructor(bytes?: number[] | Uint8Array | Buffer);
    /**
     * –ê–¥—Ä–µ—Å –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ, –¥–ª–∏–Ω–∞ 34 –±–∞–π—Ç–∞.
     * @type {number[]}
     * @readonly
     */
    get bytes(): number[];
    /**
     * –í–µ—Ä—Å–∏—è –∞–¥—Ä–µ—Å–∞, –ø—Ä–µ—Ñ–∏–∫—Å –≤ —á–∏—Å–ª–æ–≤–æ–º –≤–∏–¥–µ.
     * @type {number}
     * @throws {Error}
     */
    get version(): number;
    set version(version: number);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∞–¥—Ä–µ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * @param {number} version –í–µ—Ä—Å–∏—è –∞–¥—Ä–µ—Å–∞.
     * @returns {Address}
     * @throws {Error}
     */
    setVersion(version: number): Address;
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á.
     * @type {PublicKey}
     * @throws {Error}
     */
    get publicKey(): PublicKey;
    set publicKey(publicKey: PublicKey);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á–∏ –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * @param {PublicKey} publicKey –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á.
     * @returns {Address}
     * @throws {Error}
     */
    setPublicKey(publicKey: PublicKey): Address;
    /**
     * –ü—Ä–µ—Ñ–∏–∫—Å –∞–¥—Ä–µ—Å–∞, —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –ª–∞—Ç–∏–Ω–∏—Ü—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
     * @type {string}
     * @throws {Error}
     */
    get prefix(): string;
    set prefix(prefix: string);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∞–¥—Ä–µ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * @param {string} prefix –ü—Ä–µ—Ñ–∏–∫—Å –∞–¥—Ä–µ—Å–∞, —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ –ª–∞—Ç–∏–Ω–∏—Ü—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
     * @returns {Address}
     * @throws {Error}
     */
    setPrefix(prefix: string): Address;
    /**
     * –ê–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bech32, –¥–ª–∏–Ω–∞ 62 —Å–∏–º–≤–æ–ª–∞.
     * @type {string}
     * @throws {Error}
     */
    get bech32(): string;
    set bech32(bech32: string);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bech32.
     * @param {string} bech32 –ê–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bech32, –¥–ª–∏–Ω–∞ 62 —Å–∏–º–≤–æ–ª–∞.
     * @returns {Address}
     * @throws {Error}
     */
    setBech32(bech32: string): Address;
    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç –∏–∑ –∞–¥—Ä–µ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bech32.
     * @param {string} bech32 –ê–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bech32, –¥–ª–∏–Ω–∞ 62 —Å–∏–º–≤–æ–ª–∞.
     * @returns {Address}
     * @throws {Error}
     */
    static fromBech32(bech32: string): Address;
    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.
     * @param {PublicKey|SecretKey} key –ü—É–±–ª–∏—á–Ω—ã–π –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á.
     * @returns {Address}
     * @throws {Error}
     */
    static fromKey(key: PublicKey | SecretKey): Address;
}
/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∞–º–∏.
 * @class
 */
export declare class Block {
}
/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –±–ª–æ–∫–æ–≤.
 * @class
 */
export declare class BlockHeader {
}
/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏.
 * @class
 */
export declare class PublicKey {
    /**
     * –î–ª–∏–Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ libsodium –≤ –±–∞–π—Ç–∞—Ö.
     * @type {number}
     * @constant
     */
    static get LENGTH(): number;
    /**
     * –î–ª–∏–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –≤ –±–∞–π—Ç–∞—Ö.
     * @type {number}
     * @constant
     */
    static get SIGNATURE_LENGTH(): number;
    /**
     * –î–ª–∏–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –≤ –±–∞–π—Ç–∞—Ö.
     * @type {number}
     * @constant
     */
    get signatureLength(): number;
    /**
     * @param {number[]} bytes –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ libsodium, 32 –±–∞–π—Ç–∞ (256 –±–∏—Ç).
     * @throws {Error}
     */
    constructor(bytes: number[] | Uint8Array | Buffer);
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ libsodium, 32 –±–∞–π—Ç–∞ (256 –±–∏—Ç).
     * @type {number[]}
     * @readonly
     */
    get bytes(): number[];
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å.
     * @param {number[]|Uint8Array|Buffer} signature –ü–æ–¥–ø–∏—Å—å, 64 –±–∞–π—Ç–∞.
     * @param {number[]|Uint8Array|Buffer} message –°–æ–æ–±—â–µ–Ω–∏–µ
     * @returns {boolean}
     * @throws {Error}
     * @example
     * let key = new Uint8Array(32)
     * let sig = new Uint8Array(64)
     * let msg = new Uint8Array(1)
     * let ver = new PublicKey(key).verifySignature(sig, msg)
     */
    verifySignature(signature: number[] | Uint8Array | Buffer, message: number[] | Uint8Array | Buffer): boolean;
}
/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏.
 * @class
 */
export declare class SecretKey {
    /**
     * @param {number[]|Uint8Array|Buffer} bytes –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ.
     * –í —Ñ–æ—Ä–º–∞—Ç–µ libsodium, 64 –±–∞–π—Ç–∞ (512 –±–∏—Ç).
     * @throws {Error}
     */
    constructor(bytes: number[] | Uint8Array | Buffer);
    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ. –í —Ñ–æ—Ä–º–∞—Ç–µ libsodium, 64 –±–∞–π—Ç–∞ (512 –±–∏—Ç).
     * @type {number[]}
     * @readonly
     */
    get bytes(): number[];
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É.
     * @type {PublicKey}
     * @readonly
     */
    get publicKey(): PublicKey;
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param {number[]|Uint8Array|Buffer} message –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å.
     * @returns {number[]} –¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª–∏–Ω–æ–π 64 –±–∞–π—Ç–∞ (512 –±–∏—Ç).
     * @throws {Error}
     * @example
     * let seed = new Uint8Array(32)
     * let msg = new Uint8Array(1)
     * let sig = SecretKey.fromSeed(seed).sign(msg)
     */
    sign(message: number[] | Uint8Array | Buffer): number[];
    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ seed.
     * Libsodium –ø—Ä–∏–Ω–∏–º–∞–µ—Ç seed –¥–ª–∏–Ω–æ–π 32 –±–∞–π—Ç–∞ (256 –±–∏—Ç), –µ—Å–ª–∏ –¥–ª–∏–Ω–∞
     * –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, —Ç–æ –±–µ—Ä–µ—Ç—Å—è sha256 —Ö—ç—à.
     * @param {number[]|Uint8Array|Buffer} seed Seed –¥–ª–∏–Ω–æ–π –æ—Ç 0 –¥–æ 128 –±–∞–π—Ç.
     * @returns {SecretKey}
     * @throws {Error}
     * @example
     * let seed = new Uint8Array(32)
     * let key = SecretKey.fromSeed(seed)
     */
    static fromSeed(seed: number[] | Uint8Array | Buffer): SecretKey;
}
/**
 * @class
 * @lends Transaction
 * @private
 */
declare abstract class AbstractTransaction {
    /**
     * Genesis-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è.
     * –ú–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Genesis-–±–ª–æ–∫.
     * –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å genesis, –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞–µ—Ç–µ–ª—è - umi.
     * @type {number}
     * @constant
     * @example
     * let secKey = SecretKey.fromSeed(new Uint8Array(32))
     * let sender = Address.fromKey(secKey).setPrefix('genesis')
     * let recipient = Address.fromKey(secKey).setPrefix('umi')
     * let tx = new Transaction().
     *   setVersion(Transaction.Genesis).
     *   setSender(sender).
     *   setRecipient(recipient).
     *   setValue(42).
     *   sign(secKey)
     */
    static get Genesis(): number;
    /**
     * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è. –ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ –¥—Ä—É–≥–æ–π.
     * @type {number}
     * @constant
     * @example
     * let secKey = SecretKey.fromSeed(new Uint8Array(32))
     * let sender = Address.fromKey(secKey).setPrefix('umi')
     * let recipient = Address.fromKey(secKey).setPrefix('aaa')
     * let tx = new Transaction().
     *   setVersion(Transaction.Basic).
     *   setSender(sender).
     *   setRecipient(recipient).
     *   setValue(42).
     *   sign(secKey)
     */
    static get Basic(): number;
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
     * @type {number}
     * @constant
     * @example
     * let secKey = SecretKey.fromSeed(new Uint8Array(32))
     * let sender = Address.fromKey(secKey).setPrefix('umi')
     * let tx = new Transaction().
     *   setVersion(Transaction.CreateStructure).
     *   setSender(sender).
     *   setPrefix('aaa').
     *   setName('üôÇ').
     *   setProfitPercent(100).
     *   setFeePercent(0).
     *   sign(secKey)
     */
    static get CreateStructure(): number;
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
     * @type {number}
     * @constant
     * @example
     * let secKey = SecretKey.fromSeed(new Uint8Array(32))
     * let sender = Address.fromKey(secKey).setPrefix('umi')
     * let tx = new Transaction().
     *   setVersion(Transaction.UpdateStructure).
     *   setSender(sender).
     *   setPrefix('aaa').
     *   setName('üôÇ').
     *   setProfitPercent(500).
     *   setFeePercent(2000).
     *   sign(secKey)
     */
    static get UpdateStructure(): number;
    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞.
     * @type {number}
     * @constant
     * @example
     * let secKey = SecretKey.fromSeed(new Uint8Array(32))
     * let sender = Address.fromKey(secKey).setPrefix('umi')
     * let newPrf = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
     * let tx = new Transaction().
     *   setVersion(Transaction.UpdateProfitAddress).
     *   setSender(sender).
     *   setRecipient(newPrf).
     *   sign(secKey)
     */
    static get UpdateProfitAddress(): number;
    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–æ–∏—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è.
     * @type {number}
     * @constant
     * @example
     * let secKey = SecretKey.fromSeed(new Uint8Array(32))
     * let sender = Address.fromKey(secKey).setPrefix('umi')
     * let newFee = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
     * let tx = new Transaction().
     *   setVersion(Transaction.UpdateFeeAddress).
     *   setSender(sender).
     *   setRecipient(newFee).
     *   sign(secKey)
     */
    static get UpdateFeeAddress(): number;
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.
     * @type {number}
     * @constant
     * @example
     * let secKey = SecretKey.fromSeed(new Uint8Array(32))
     * let sender = Address.fromKey(secKey).setPrefix('umi')
     * let transit = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
     * let tx = new Transaction().
     *   setVersion(Transaction.CreateTransitAddress).
     *   setSender(sender).
     *   setRecipient(transit).
     *   sign(secKey)
     */
    static get CreateTransitAddress(): number;
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.
     * @type {number}
     * @constant
     * @example
     * let secKey = SecretKey.fromSeed(new Uint8Array(32))
     * let sender = Address.fromKey(secKey).setPrefix('umi')
     * let transit = Address.fromBech32('aaa18d4z00xwk6jz6c4r4rgz5mcdwdjny9thrh3y8f36cpy2rz6emg5svsuw66')
     * let tx = new Transaction().
     *   setVersion(Transaction.DeleteTransitAddress).
     *   setSender(sender).
     *   setRecipient(transit).
     *   sign(secKey)
     */
    static get DeleteTransitAddress(): number;
    /**
     * @param {number[]|Uint8Array|Buffer} [bytes] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ, 150 –±–∞–π—Ç.
     * @throws {Error}
     * @private
     */
    protected constructor(bytes?: number[] | Uint8Array | Buffer);
}
/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
 * @class
 * @lends Transaction
 * @private
 */
declare abstract class AbstractTransactionBase extends AbstractTransaction {
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ, 150 –±–∞–π—Ç.
     * @type {number[]}
     * @readonly
     */
    get bytes(): number[];
    /**
     * –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, sha256 –æ—Ç –≤—Å–µ—Ö 150 –±–∞–π—Ç.
     * @type {number[]}
     * @readonly
     */
    get hash(): number[];
    /**
     * –í–µ—Ä—Å–∏—è (—Ç–∏–ø) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
     * –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
     * –ò–∑–º–µ–Ω—è—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω –±—ã–ª –∑–∞–¥–∞–Ω, –Ω–µ–ª—å–∑—è.
     * @type {number}
     * @throws {Error}
     * @see Transaction.Genesis
     * @see Transaction.Basic
     * @see Transaction.CreateStructure
     * @see Transaction.UpdateStructure
     * @see Transaction.UpdateProfitAddress
     * @see Transaction.UpdateFeeAddress
     * @see Transaction.CreateTransitAddress
     * @see Transaction.DeleteTransitAddress
     */
    get version(): number;
    set version(version: number);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * @param {number} version –í–µ—Ä—Å–∏—è –∞–¥—Ä–µ—Å–∞.
     * @returns {this}
     * @throws {Error}
     * @see Transaction.Genesis
     * @see Transaction.Basic
     * @see Transaction.CreateStructure
     * @see Transaction.UpdateStructure
     * @see Transaction.UpdateProfitAddress
     * @see Transaction.UpdateFeeAddress
     * @see Transaction.CreateTransitAddress
     * @see Transaction.DeleteTransitAddress
     */
    setVersion(version: number): this;
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
     * @type {Address}
     * @throws {Error}
     */
    get sender(): Address;
    set sender(address: Address);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * @param {Address} address –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
     * @returns {this}
     * @throws {Error}
     */
    setSender(address: Address): this;
    /**
     * –ü–æ–ª—É—á–∞—Ç–µ–ª—å.
     * –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π CreateStructure –∏ UpdateStructure.
     * @type {Address}
     * @throws {Error}
     */
    get recipient(): Address;
    set recipient(address: Address);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫—Ä–æ–º–µ CreateStructure –∏ UpdateStructure.
     * @param {Address} address –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
     * @returns {this}
     * @throws {Error}
     */
    setRecipient(address: Address): this;
    /**
     * –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ UMI-—Ü–µ–Ω—Ç–∞—Ö, —Ü–µ–ª–æ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 18446744073709551615.
     * –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π JavaScript –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 9007199254740991.
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Genesis –∏ Basic —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
     * @type {number}
     * @throws {Error}
     */
    get value(): number;
    set value(value: number);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–º–º—É –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 9007199254740991.
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Genesis –∏ Basic —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
     * @param {number} value
     * @returns {this}
     * @throws {Error}
     */
    setValue(value: number): this;
    /**
     * Nonce, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 0 –¥–æ 18446744073709551615.
     * –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π JavaScript –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 9007199254740991.
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sign().
     * @type {number}
     * @throws {Error}
     */
    get nonce(): number;
    set nonce(nonce: number);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç nonce –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * @param {number} nonce Nonce, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ–≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 0 –¥–æ 9007199254740991.
     * @returns {this}
     * @throws {Error}
     */
    setNonce(nonce: number): this;
    /**
     * –¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –¥–ª–∏–Ω–∞ 64 –±–∞–π—Ç–∞.
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sign().
     * @type {number[]}
     * @throws {Error}
     */
    get signature(): number[] | Uint8Array | Buffer;
    set signature(signature: number[] | Uint8Array | Buffer);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * @param {number[]|Uint8Array|Buffer} signature –ü–æ–¥–ø–∏—Å—å, –¥–ª–∏–Ω–∞ 64 –±–∞–π—Ç–∞.
     * @returns {this}
     * @throws {Error}
     */
    setSignature(signature: number[] | Uint8Array | Buffer): this;
    /**
     * –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–µ–º.
     * @param {SecretKey} secretKey
     * @returns {this}
     * @throws {Error}
     */
    sign(secretKey: SecretKey): this;
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.
     * @returns {boolean}
     * @throws {Error}
     */
    verify(): boolean;
}
/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
 * @class
 * @param {number[]} [bytes] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ, 150 –±–∞–π—Ç.
 * @throws {Error}
 */
export declare class Transaction extends AbstractTransactionBase {
    /**
     * –ü—Ä–µ—Ñ–∏–∫—Å –∞–¥—Ä–µ—Å–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è CreateStructure –∏ UpdateStructure.
     * @type {string}
     * @throws {Error}
     */
    get prefix(): string;
    set prefix(prefix: string);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è CreateStructure –∏ UpdateStructure.
     * @param {string} prefix –ü—Ä–µ—Ñ–∏–∫—Å –∞–¥—Ä–µ—Å–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
     * @returns {this}
     * @throws {Error}
     */
    setPrefix(prefix: string): this;
    /**
     * –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è CreateStructure –∏ UpdateStructure.
     * @type {string}
     * @throws {Error}
     */
    get name(): string;
    set name(name: string);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è CreateStructure –∏ UpdateStructure.
     * @param {string} name –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.
     * @returns {this}
     * @throws {Error}
     */
    setName(name: string): this;
    /**
     * –ü—Ä–æ—Ñ–∏—Ç–∞ –≤ —Å–æ—Ç—ã—Ö –¥–æ–ª—è—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å —à–∞–≥–æ–º –≤ 0.01%.
     * –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 100 –¥–æ 500 (—Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç 1% –¥–æ 5%).
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è CreateStructure –∏ UpdateStructure.
     * @type {number}
     * @throws {Error}
     */
    get profitPercent(): number;
    set profitPercent(percent: number);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â—è–µ—Ç this.
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è CreateStructure –∏ UpdateStructure.
     * @param {number} percent –ü—Ä–æ—Ñ–∏—Ç –≤ —Å–æ—Ç—ã—Ö –¥–æ–ª—è—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å —à–∞–≥–æ–º –≤ 0.01%. –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 100 –¥–æ 500 (—Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç 1% –¥–æ 5%).
     * @returns {this}
     * @throws {Error}
     */
    setProfitPercent(percent: number): this;
    /**
     * –ö–æ–º–∏—Å—Å–∏—è –≤ —Å–æ—Ç—ã—Ö –¥–æ–ª—è—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å —à–∞–≥–æ–º –≤ 0.01%.
     * –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 2000 (—Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç 0% –¥–æ 20%).
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è CreateStructure –∏ UpdateStructure.
     * @type {number}
     * @throws {Error}
     */
    get feePercent(): number;
    set feePercent(percent: number);
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç this.
     * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è CreateStructure –∏ UpdateStructure.
     * @param {number} percent –ö–æ–º–∏—Å—Å–∏—è –≤ —Å–æ—Ç—ã—Ö –¥–æ–ª—è—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å —à–∞–≥–æ–º –≤ 0.01%. –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 2000 (—Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç 0% –¥–æ 20%).
     * @returns {this}
     * @throws {Error}
     */
    setFeePercent(percent: number): this;
}
export {};
