/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 * @flow
 */

declare export class Address {
  constructor(): this;
  static fromBech32(bech32: string): Address;
  static fromBytes(bytes: ArrayLike<number>): Address;
  static fromKey(key: PublicKey | SecretKey): Address;
  getBech32(): string;
  getBytes(): number[];
  getPrefix(): string;
  setPrefix(prefix: string): Address;
  getPublicKey(): PublicKey;
  setPublicKey(publicKey: PublicKey): Address;
}
declare export class Block {}
declare export class BlockHeader {}
declare export class PublicKey {
  constructor(bytes: ArrayLike<number>): this;
  getBytes(): number[];
  verifySignature(
    signature: ArrayLike<number>,
    message: ArrayLike<number>
  ): boolean;
}
declare export class SecretKey {
  constructor(bytes: ArrayLike<number>): this;
  static fromSeed(seed: ArrayLike<number>): SecretKey;
  getBytes(): number[];
  getPublicKey(): PublicKey;
  sign(message: ArrayLike<number>): number[];
}
declare export class Transaction {
  static Genesis: number;
  static Basic: number;
  static CreateStructure: number;
  static UpdateStructure: number;
  static UpdateProfitAddress: number;
  static UpdateFeeAddress: number;
  static CreateTransitAddress: number;
  static DeleteTransitAddress: number;
  constructor(): this;
  static fromBase64(base64: string): Transaction;
  static fromBytes(bytes: ArrayLike<number>): Transaction;
  getBase64(): string;
  getBytes(): number[];
  getHash(): number[];
  getVersion(): number;
  setVersion(version: number): Transaction;
  getSender(): Address;
  setSender(address: Address): Transaction;
  getRecipient(): Address;
  setRecipient(address: Address): Transaction;
  getValue(): number;
  setValue(value: number): Transaction;
  getNonce(): number;
  setNonce(nonce: number): Transaction;
  getSignature(): number[];
  setSignature(signature: ArrayLike<number>): Transaction;
  sign(secretKey: SecretKey): Transaction;
  getPrefix(): string;
  setPrefix(prefix: string): Transaction;
  getName(): string;
  setName(name: string): Transaction;
  getProfitPercent(): number;
  setProfitPercent(percent: number): Transaction;
  getFeePercent(): number;
  setFeePercent(percent: number): Transaction;
  verify(): boolean;
}
